#!/bin/bash
# A smarter `ssh-agent` (and other daily login certs)
# wren gayle romano <wren@cpan.org>                 ~ 2024.01.09
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# BUG: I suspect this does not work well with ssh forwarding; so
# we need to fix that asap.
#
# TODO: although not relevant to anyone else, update this to work
#   with `gcert` / `glogin` on Google corp machines.
#
# TODO: update this to also `gpg-agent`, as desired
#   <https://linux.die.net/man/1/gpg-agent>
#
# TODO: support -s and -c flags, for explicitly setting the format
#   of the agent file to use Bourne-type or csh-type syntax.  (This
#   just means forwarding those flags to the call to ssh-agent;
#   though it also affects how this script sources that file so it
#   can add the keys.)
#
# TODO: add a flag to show `ssh-add -l`
# TODO: add flags for "strict" vs "lax" modes re missing keys.
#
# Note to self: You can use `ssh-keygen -y -f $KEY` to check passphrases:
#   (1) if the key has a passphrase, it will prompt you for it.
#     (A) if you give the right one, it'll show the public key.
#     (B) if you give the wrong one, it'll display "load failed".
#   (2) if the key doesn't have a passphrase, it won't prompt,
#     it'll just show the public key.
# N.B., the order of the flags is important: `-y` must come before `-f`

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: must use $HOME because "~" isn't expanded for the `[ -r`.
# However, beware that if you call the shell builtin `type` on an alias,
# it will still use "~" to abbreviate things!
SSH_DIR="$HOME/.ssh"

AGENT_FILE="$SSH_DIR/agent"

# TODO: for portability we may prefer to do a colon-separated thing like PATH.
# N.B., this is a bash array! (cf., <https://www.shell-tips.com/bash/arrays/>)
# ${AGENT_KEYS[@]}      Return everything, but subject to Bash tokenization.
# "${AGENT_KEYS[*]}"    Return everything as a single Bash token.
# "${AGENT_KEYS[@]}"    Return each element as a separate Bash token.
# "${!AGENT_KEYS[@]}"   Return all the indices into the array.
AGENT_KEYS=("$SSH_DIR/id_dsa" "$SSH_DIR/id_rsa")

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_info() {
    if [[ $VERBOSE -ne 0 ]]; then
        >&2 echo -e "\033[1;32m#\033[0m \033[1m$*\033[0m"
    fi
}

_warn() {
    if [[ $VERBOSE -ne 0 ]]; then
        >&2 echo -e "\033[1;33m#\033[0m \033[1m$*\033[0m"
    fi
}

_error() {
    >&2 echo -e "\033[1;31m${0##*/}:\033[0m \033[1m$*\033[0m"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_usage() {
>&2 cat << __END_USAGE__
Usage: ${0##*/} [options]

This script helps ensure there is only one ssh-agent running, and
adds a list of keys when first starting the agent up.  However,
note that we cannot cause changes to the shell that invokes this
script, thus you will need to manually eval the shell script this
prints to stdout.  To avoid needing to do this manually, you can
set an alias to both call this script and eval the output.  On Bash
you would do this with the command:

    alias ${0##*/}='eval \$(command ${0##*/})'

However, note that the alias cannot take any arguments.

Options:

    --help | -h | -?    Display this message.
    --kill | -k     Kill the current agent (if any), instead of starting.
    --verbose       Print progress information and warnings.
                    N.B., everything this prints goes to stderr;
                    so that it doesn't interfere with the suggested
                    alias above.

__END_USAGE__
}

KILL=0
VERBOSE=0
for arg in "$@"; do
    case "$arg" in
    --verbose)          VERBOSE=1; shift ;;
    --kill | -k)        KILL=1; shift ;;
    --help | -h | -\?)   _usage; exit 0 ;;
    *)                  _error "Unknown option: $arg\n"; _usage; exit 1 ;;
    esac
done

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Check that the agent file's location is accessible.
#       (This helps clean up some error messages)
#
# TODO: is there some way to check all three of these bits at once?
if [[ ! -d "$SSH_DIR" || ! -r "$SSH_DIR" || ! -w "$SSH_DIR" ]]; then
    _error "Cannot access directory: $SSH_DIR\n"
    exit 1
fi
unset SSH_DIR

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Check if an agent is already running.
# TODO: If (and only if!) SSH_AGENT_PID is already set, then we
# might consider using `ssh-add -l | grep ${USER} > /dev/null 2>&1`
# to detect whether that pid is still valid.  So, might should integrate
# that with the current ps hacking to help guarantee cohesion if folks
# call ssh-agent outside of this script.
SSH_AGENT_PID=0
IS_RUNNING=0
if [[ -r "$AGENT_FILE" ]]; then
    # TODO: why did I use perl's BEGIN/END, instead of just
    # printing it out when we hit it?
    SSH_AGENT_PID=$(cat "$AGENT_FILE" | perl -nle '
        BEGIN {$pid = 0;}
        $pid = $1 if m/^SSH_AGENT_PID=(\d+)/;
        END {print $pid;}')
    # We don't need the -e if we're passing the PID directly.
    # N.B., passing -e or -U (or -u?) overrides the -p flag.
    if ps -co pid,user,command -p "$SSH_AGENT_PID" |
        grep "$USER" |
        grep 'ssh-agent' >/dev/null 2>&1
        # N.B., don't use -s or -q, for portability
    then
        if [[ $KILL -eq 0 ]]; then
            # TODO: also report `ssh-add -l`
            _info "Agent is already running (pid: $SSH_AGENT_PID)"
        fi
        IS_RUNNING=1
        # TODO: Should add some sanitization to ensure that if the
        # global SSH_AGENT_PID is set, then it matches the expected
        # value from the agent file.
    else
        _info 'Removing stale agent file'
        rm "$AGENT_FILE"
        #IS_RUNNING=0
    fi
fi

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Kill the agent (if desired).
if [[ $KILL -ne 0 ]]; then
    if [[ $IS_RUNNING -ne 0 ]]; then
        _info 'Killing ssh-agent'
        export SSH_AGENT_PID
        ssh-agent -k
        # TODO: should return any error codes from the above.
    else
        _info 'Agent is not running'
    fi
    exit 0
fi
unset SSH_AGENT_PID

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Start a new agent (as needed).
INVALID_KEY=0
if [[ $IS_RUNNING -eq 0 ]]; then
    _info 'Starting ssh-agent'
    # NOTE: This can give ugly error messages if the SSH_DIR
    # doesn't exist; hence checking for that above.
    ssh-agent > "$AGENT_FILE"
    # We source it so we can add keys, but the caller will have to
    # source it themselves too.
    source "$AGENT_FILE" >/dev/null 2>&1
    # BUG: should be checking error codes from the above!
    IS_RUNNING=1

    # TODO: it'd be nice if we could filter split the list, so we
    # can call `ssh-add` just once, with all the valid keys together.
    for key in "${AGENT_KEYS[@]}" ; do
        if [[ -r "$key" ]]; then
            _info "Adding key: $key"
            # BUG: (possibly) If this generates anything on stdout,
            # then the suggested alias will try to eval it!
            ssh-add "$key"
            # BUG: should be checking error codes from the above.
        else
            # NOTE: I used to just give these as `_info`, but that
            # was too confusing when the files disappeared.
            _error "Cannot access key: $key"
            # We don't exit just yet, so that we can see all the
            # errors about missing keys.
            INVALID_KEY=1
        fi
    done
fi

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Print stuff just as if the user called ssh-agent themselves.
if [[ $IS_RUNNING -eq 1 ]]; then
    _info 'Be sure to eval the following in your current shell session'
    cat "$AGENT_FILE"
fi

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ If any keys were invalid, then make sure to exit with error.
if [[ $INVALID_KEY -ne 0 ]]; then
    # TODO: Should prolly kill the agent too; just to make
    # sure everything's in a clean state (i.e., other shell
    # sessions don't pick up on the agent that has no keys).
    # If we do that, then this check should move above the point
    # where we cat the agent file.  Also, we may want to add flags
    # to distinguish "strict" vs "lax" mode regarding missing keys.
    exit 1
fi

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ fin.
