# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# wren gayle romano's GNU Screen config             ~ 2021.08.19
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# <http://aperiodic.net/screen/appearance>
# <http://aperiodic.net/screen/truncation_padding_escapes>
# <https://lizdenys.com/journal/articles/understanding-gnu-screens-captions.html>
#
# TODO(2021.08.02):
# * see if there're any fun bits to take from <https://raw.githubusercontent.com/ivan-loh/dotfiles/master/.screenrc>
# * also check out <https://github.com/hi94740/screen-command>
# * also <https://liquidat.wordpress.com/2008/10/17/short-tip-gnu-screen-with-proper-scroll-session-management-support/>
# * Consider having the main ~/.screenrc include the line `source ~/.screenrc-$STY`.  The STY variable is automatically set to the session name (with some TTY or session-id stuff too), thus we could have specific settings for each of our named sessions.


# ~~~~~ Basic Config
defutf8 on             # Enable UTF-8 *windows* (Use `-U` to enable for *displays* too)
defmonitor on          # Monitor activity on all windows (toggle with `<C-a>M`)
autodetach on          # Detach screen on hangup (saves running programs)
startup_message off    # Disable copyright & silly warning splash screen
shell $SHELL           # The shell to use (prepend `-` to make it a login-shell)
#shelltitle $SHELL     # The default %t when creating new shell windows.
term "screen-256color" # The $TERM used inside screen.
# BUG: really we should set term based on whatever the incoming $TERM is,
# or use some other sort of color autodetection capability.

# ~~~~~ History &c.
defscrollback 15000    # A~la the -h flag
#deflog on             # Enable logging for all new windows by default
#logfile $HOME/.screen-logs/%Y%m%d-%n.log
#logfile flush 10      # How many seconds to wait before flushing to filesystem
#logtstamp [on|off]    # Enable writing timestamps every N seconds
#logtstamp after 120   # How often to timestamp
#logtstamp string "-- %n:%t -- time-stamp -- %M/%d/%y %c:%s --\n"

# Clear screen after exiting vim; like TERM=xterm, and unlike TERM=vt100
# or the default behavior of TERM=screen. (Alternatively, or if you
# have issues outside of GNU Screen: vim sends the &t_ti string to the
# terminal when on startup, and sends the &t_te string on shutdown; so
# you can configure those as desired <https://vi.stackexchange.com/a/436>)
altscreen on

# ~~~~~ Message formatting options.
#activity "Activity on %n"
#bell_msg "Bell in window %n"
#vbell_msg "Wuff, Wuff!!
nethack on


# ~~~~~ Caption line, Hardstatus line, Message line.
# Cf., <https://www.gnu.org/software/screen/manual/html_node/String-Escapes.html>
#   %H  hostname
#   %S  s.session name.  (N.B., this string-escape was only added in
#           version 4.1.0 <http://savannah.gnu.org/bugs/index.php?23738>.
#           For older versions of screen you'll need to fake it by one
#           of several tricks: <https://stackoverflow.com/q/2479683>,
#           <https://superuser.com/a/212520>.)
#   %n  current s.window's number/ID
#   %f  current s.window's flags
#           <https://www.gnu.org/software/screen/manual/html_node/Windows.html>
#   %t  current s.window's :title (defaults to the initial program;
#           change it via `<C-a>:title "whatever"`. Or see:
#           <https://lizdenys.com/journal/articles/understanding-gnu-screens-captions.html>)
#   %h  current s.window's terminal title-bar.  N.B., the documentation
#           calls this "hardstatus" but only in the sense of:
#           <https://www.gnu.org/software/screen/manual/html_node/Hardstatus.html>
#           Which is completely different from the command
#           `<C-a>:hardstatus {when} {fmt}` as described here:
#           <https://www.gnu.org/software/screen/manual/html_node/Hardware-Status-Line.html>
#           Afaict the only connection between these two things is that
#           the latter command defaults to {fmt}="%h".
#   %[+-][L]w      show all s.window numbers & names:
#           - only show s.windows up to the current one
#           + only show s.windows after the current one
#           L show the s.window's flags too (appended to the number)
#               N.B., this will alter the coloration of the caption.
#               FIXME: so we'll need to use color codes to repair the changes.
#   %u      all other users on this window
#           <https://www.gnu.org/software/screen/manual/html_node/Multiuser-Session.html>
#   %=  a~la latex \hfill
#   %l  loadaverages
#   %?...%? only display this if some %-escape inside expands to nonempty string
#
# N.B., even with defutf8 on, the caption really doesn't like having unicode!
# Alas, I'm not sure where that default grey background came from, so I can't recover it vs the changes %w makes; but we can embrace the black background and color in general.
caption always "%{= kw}  %{+b c}%H%{-}:%{+b g}%S%{-}:%{+b M}%2n*%f %t%{-}%{y}%?(%u)%?%{-}  [%?%-Lw%?...%?%+Lw%?]%=<%{r}%l%{-}>  %{c}%M %d (%D) %0c%{-}  "

# Aha! That's how we change it:
# <https://www.gnu.org/software/screen/manual/html_node/Sorendition.html>
# hrm, not quite. That sets the color of the activity announcement
# ("message line") and the repl when doing `<C-a>:` but it doesn't change
# what "%w" looks like.  However, it does seem to indicate that it's the
# bright-black "K" which gave us the old default grey (or maybe it's the
# bold-black given our :attrcolor)
rendition so "=b" "KW"

# Attrcolor stuff, i.e. what goes inside %{...}:
#   =   completely override/replace the attribute set
#   +a  add attribute 'a'
#   -a  remove attribute 'a'
#   !   invert current attribute set
###
#   d   dim
#   u   underline
#   b   bold
#   r   reverse/inverse
#   s   standout
#   B   blinking
###
#   k r g y b m c w     Ansi colors (3-bit/standard)
#   K R G Y B M C W     Ansi colors (4-bit/bright/intense)
#   d   default color
#   .   leave color unchanged (for use with i/I pseudo-colors)
#   i   pseudo-color to set standard
#   I   pseudo-color to set bright/intense
#   %{-} reset the most recent attr/color change (there's a stack of them kept)
#   xy  set bg=x fg=y

# TODO: set the backtick thing to use <https://github.com/spook/sshping>
# and put some parsed version of the results into the caption.  Or if we
# can't get that to work, see also <https://serverfault.com/q/807910>.
# And if that still doesn't help, check out the more general options:
# <https://low-orbit.net/linux-how-to-measure-network-latency>
# <https://www.cyberciti.biz/faq/linux-unix-test-internet-connection-download-upload-speed/>


# ~~~~~ Enable 256-colors (HT: <http://robotsrule.us/vim/>)
# TODO: see also <http://taint.org/wk/RemoteLoginAutoScreen>
#       and <http://www4.informatik.uni-erlangen.de/~jnweiger/screen-faq.html>
attrcolor b ".I"       # Remap 'bold' to use "high-intensity background color"
termcapinfo xterm*|screen* 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
defbce "on"            # Turn BCE (background color erase) on by default
# If you're not sure what screen thinks about your terminal, try `<C-a>:dinfo`
# For more on the termcap stuff:
# <https://www.gnu.org/software/screen/manual/html_node/Special-Capabilities.html>

# ~~~~~ Keybindings
# Copy screen clipboard to mac clipboard.
# HT: <https://github.com/cypher/dotfiles/blob/master/screenrc>
#bind b eval "writebuf" "exec sh -c 'pbcopy < /tmp/screen-exchange'"

# Make backspace sane on Debian systems.
# HT: <https://github.com/cypher/dotfiles/blob/master/screenrc>
#termcapinfo xterm 'bc@:bs@'
#termcapinfo xterm-color 'bc@:bs@'

# Support mouse scrolling
#termcapinfo xterm* ti@:te@

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ fin.
