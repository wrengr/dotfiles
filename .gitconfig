# N.B., the [user] values are overridden by the GIT_*_{NAME,EMAIL}
# variables. Thus, even though we set them here, we can still change
# them on each individual machine in our ~/.bash_profile.
[user]
    name = wren romano
    email = wren@community.haskell.org
[github]
    user = wrengr
[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = true
[push]
    default = simple
[merge]
    ff = only
[core]
    autocrlf = false
    filemode = false

# Have newly-created branches starting from a branch, set their
# start point as upstream (as oppose to the default 'true' setting
# where this only happens when the start point is a remote-tracking
# branch)
# <http://grimoire.ca/git/config>
[branch]
    autoSetupMerge = always

# There are ways of making 'pull --rebase' the default, but it seems
# to take a non-trivial amount of work; so I'm just using an alias
# 'pr' for now. One way to try to make 'pr' the default 'pull' is to
# set 'pull.rebase = true', another way is to set 'branch.autoSetupRebase
# = always', but neither of those seems to work quite right for me.
# In any case, however you do it, if you try a 'pr' and it has conflicts
# you need to manually resolve, then do 'rebase --continue' afterwards
# to finish it up.
# <http://randyfay.com/content/simpler-rebasing-avoiding-unintentional-merge-commits>
# <http://randyfay.com/content/rebase-workflow-git>


# For more alias ideas, see:
# <http://noamlewis.wordpress.com/2012/05/21/my-git-aliases/>
# or the very last few at <https://gist.github.com/pksunkara/988716>
[alias]
    # For more details on the files affected, try adding --name-status,
    # --stat, or --numstat.
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # N.B., the %C(auto) color was introduced in git 1.8.3 (24 May 2013)
    lola = log --color --graph --pretty=format:'%C(yellow)%h%Creset %Cgreen(%cr)%Creset %C(blue)<%an>%Creset%C(auto)%d%Creset %s'
    # BUG: can't actually set this alias because of the $(), but
    # it gives a nice pretty version of reflog
    #reflol = log --graph --decorate --oneline $(git rev-list -g --all)
    st   = status --branch
    # TODO: make aliases for patch mode, since that's really what we want
    # most of the time. Prolly should take over the `ci` alias;
    # with some separate alias (or typing out the full thing) to get
    # `commit --all`
    ci   = commit --all
    pr   = pull --rebase
    rc   = rebase --continue
    hw   = help --web
    unpushed = log @{u}..
    # This will unrecord the most recent commit. N.B., you can also
    # use "~1" instead of "^" at the end; or "~N" to revert the
    # N most-recent commits. <http://stackoverflow.com/q/927358/358069>
    unrecord = reset --soft 'HEAD^'
    # Undo a 'git reset'. N.B., '{1}' may not always be the one you
    # want; cf 'git reflog' <http://stackoverflow.com/a/2531803/358069>
    unreset = reset 'HEAD@{1}'
    # N.B., we do *not* pass the --all flag here! Instead we use --patch
    # to selectively choose changes.
    amend = commit --amend --patch
    # Revert all unstaged changes
    # * To revert staged files, use 'git reset -- .'
    # * To remove untracked files, use 'git clean -df'
    # * To revert only some chunks, use 'git checkout -p'
    # In all cases, you can give a specific file name instead of '.'
    # <http://stackoverflow.com/q/52704/358069>
    revert-all = checkout -- .
    # Then pass the name of the new branch in the local repo.
    push-new-branch = push --set-upstream origin


# Trying to solve this problem
# <http://stackoverflow.com/q/11403407>
# <http://stackoverflow.com/a/6565661>
# <http://stackoverflow.com/a/5343146>
#[credential "https://github.iu.edu/"]
#    username = wrengr

# TODO: is there a way to set this http info differently for various
# hosts, while using the same file (so I don't need to postprocess
# the stuff in my dotfiles repo)?
#[http]
#    cookiefile = /usr/local/google/home/wrengr/.gitcookies

# Speed up pulling from repos by pulling from the read-only version
# (so you don't need to authenticate) but can still push to the
# real one.
# TODO: do we actually want/need to do this?
# <http://billiob.net/blog/20110410_git_pushinsteadof.html>
# <https://www.kernel.org/pub/software/scm/git/docs/git-config.html>
#[url "git@github.com:"]
#    pushInsteadOf = https://github.com/
#    pushInsteadOf = git://github.com/
