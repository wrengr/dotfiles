# N.B., these [user] values are overridden by the environment variables
# GIT_{AUTHOR,COMMITTER}_{NAME,EMAIL}.
[user]
    name = wren romano
    # By default use my anonymous GitHib email.
    email = 2998727+wrengr@users.noreply.github.com
    # Instruct Git to not try guessing name and email, but force
    # you to specify them when you set up a new repo:
    #useConfigOnly = true
    # TODO: set up GPG stuff. Not that any project I work on uses
    # it... Once this is enabled here, always pass -S or -s to
    # commit and -s to tag.
    # Cf., <https://mikegerwitz.com/papers/git-horror-story>
    #signingkey = 00000000
[github]
    user = wrengr
[core]
    # Just to be sure.
    # BUG: for some reason git is picking up /usr/bin/vim rather
    # than /sw/bin/vim, even though the latter comes first in PATH...
    editor = vim
    # Chromium style demands we disable autocrlf.
    # TODO: do we want this everywhere else? Can we guard it to be
    # Chromium-only?
    autocrlf = false
    filemode = false
    whitespace = trailing-space,space-before-tab
    # TODO: we want something like this, but we don't want to use
    # ~/.gitignore per se, since that's likely to be the one in my
    # dotfiles repo, which ignores a bunch of homedir-specific stuff
    # we may not want to ignore elsewhere. So we should add some file
    # like ~/.gitconfig.ignore to the dotfiles repo, and then use that
    # one here:
    #excludesfile = '~/.gitignore'


[advice]
    # Disable `git status`'s "how to stage/unstage/add" hints
    statusHints = false
    # Disable `git push`'s hints about non-fastforward-able patches
    #pushNonFastForward = false
    # Others: pushUpdateRejected, pushNonFFCurrent, pushNonFFMatching,
    # pushAlreadyExists, pushFetchFirst, pushNeedsForce, statusHints,
    # statusUoption, commitBeforeMerge, resolveConflict, implicitIdentity,
    # detachedHead, amWorkDir, rmHints, addEmbeddedRepo
[push]
    default = simple
    # Have `git push` always use the --follow-tags flag.
    # N.B., --follow-tags causes to push all *annotated* tags which
    # are reachable from pushed commits.  Annotated-tags are those
    # created via `git tag -a TAG -m MESSAGE`, which creates a proper
    # git object (cf., <https://stackoverflow.com/a/25996877>).
    # Whereas `git tag TAG` creates an unannotated-tag, which is a
    # mere pointer rather than a proper git object, and thus is a
    # second-class citizen that should only exist in the local repo.
    # While there does exist a command `git push --tags` which will
    # also push unannotated-tags, it's strongly disrecommended.
    #followTags = True
#[pull]
#    ff = only
[merge]
    ff = only
    # Print conflicts with the original as well as "ours" and "theirs"
    #conflictstyle = diff3
# I don't actually like this exact setup, but the fact that we can
# do things like this is good to bear in mind, in case I come up with a
# particular command/flow that does capture my workflow.
#[merge]
#    tool = vimdiffnice
#[mergetool "vimdiffnice"]
#    cmd = vimdiff -c \"wincmd J\" -c \"0\" -c \"/<<<<<<< \" $MERGED $LOCAL $BASE $REMOTE
[diff]
    # TODO: consider installing and using JaneStreet's implementation
    # instead: <https://github.com/janestreet/patdiff>. It's a lot
    # nicer about how it colorizes things:
    # <http://neocontra.blogspot.com/2013/02/public-service-announcement-patdiff-is.html>
    # Or, consider using <https://github.com/so-fancy/diff-so-fancy>
    algorithm = patience
    # Use prefixes (i)ndex, (w)ork tree, (c)ommit, (o)bject. Rather
    # than the standard generic (a) (b). For example:
    # git diff                  # i vs w
    # git diff HEAD             # c vs w
    # git diff --cached         # c vs i
    # git diff HEAD:file1 file2 # o vs w
    mnemonicPrefix = true
[branch]
    # Have newly-created branches starting from a branch, set their
    # start point as upstream (as oppose to the default 'true' setting
    # where this only happens when the start point is a remote-tracking
    # branch). <http://grimoire.ca/git/config>
    autoSetupMerge = always
[log]
    # abbrevCommit = true
    mailmap = true
[grep]
    # Use -n by default.
    lineNumber = true
    # "basic" = -G / grep; "extended" = -E / egrep; "fixed" = -F / fgrep;
    # "perl" = -P / pcre.
    patternType = basic


# TODO: consider also: <http://www.caliban.org/ruby/acoc.shtml>
# The documentation on what things have color names is hidden away
# in: <https://git-scm.com/docs/git-config>
# Also, cf: <https://stackoverflow.com/a/28256977/358069>
# Alas, `git config --get-regexp --name-only color.*` only shows the non-default ones!
[color]
    ui = true
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    #grep, pager, decorate, showbranch
[color "branch"]
    # TODO: is there any way to colorize the hash (a la color.diff.commit)?
    current = cyan bold
    upstream = magenta bold
    local = green bold
    remote = blue bold
[color "decorate"]
    # TODO: is there any way to actually state the following desired equivalences?
    #     color.decorate.head         = color.branch.current
    #     color.decorate.branch       = color.branch.local
    #     color.decorate.remoteBranch = color.branch.remote
    head = cyan bold
    branch = green bold
    remoteBranch = blue bold
    tag = yellow bold
    stash = red bold
    # <log-tree.c> also has a "grafted" color (default: bold blue),
    # but there's no way we can change that color from here.
[color "diff"]
    meta = yellow bold
    # N.B., color.diff.commit is used both for diff itself **but
    # also for git log**! In particular, it's the color that --oneline
    # will use! This seems to only be discoverable by looking at the
    # source code for <pretty.c>
    commit = yellow
    frag = magenta bold
    # Seems like "func" is everything else on the same line as "frag"...
    func = magenta
    old = red
    new = green
    whitespace = red reverse
#[color "grep"]
#    context =
#    filename =
#    function =
#    linenumber =
#    matchContext =
#    matchSelected =
#    selected =
#    separator =
#[color "interactive"]
#    prompt =
#    header =
#    help =
#    error =
[color "status"]
    branch = magenta bold
    added = yellow
    changed = green
    untracked = cyan
    #unmerged =

# Cf., <https://github.com/ddopson/dotfiles/blob/master/.gitconfig>
[pretty]
    # N.B., the %C(auto) color was introduced in git 1.8.3 (24 May 2013)
    # N.B., the meaning of %C(auto) for %h and %H is color.diff.commit
    # (whereas %t, %T, %p, and %P are all colorless). Whereas for
    # %d and %D is uses color.decorate
    #
    # TODO: consider moving the %d to the end of the line? T'would
    # differ from lol, but would help keep the branch/tag info from
    # interfering with reading the commit subjects...
    #
    # BUG: unlike the lol alias (i.e., using --oneline) this doesn't
    # mix well with --stat etc. The docs say that --pretty=tformat:blah
    # (or --format=blah) is what --oneline uses to get "terminator
    # semantics" rather than the "separator semantics" of
    # --pretty=format:blah. But for some reason, using lola with
    # --stat etc introduces an additional blank line (with the
    # vertical bar from the --graph) before it prints the stats.
    # And if you try using --pretty=format:blah instead, then we
    # still get that vertical bar followed by a newline before the
    # stats; that only gets rid of the newline just *before* the
    # vertical bar.
    #
    # N.B., there's some strange glitch here where double-quotes
    # work as quotes, but single-quotes show up as literals.
    lola = tformat:"%C(auto)%h%Creset %Cgreen(%cr)%Creset %Cblue<%aN>%Creset%C(auto)%d%Creset %s"


# TODO: anything else fun in <https://github.com/tmsanrinsha/dotfiles/blob/master/home/.gitconfig> ?


# There are ways of making 'pull --rebase' the default, but it seems
# to take a non-trivial amount of work; so I'm just using an alias
# 'pr' for now. One way to try to make 'pr' the default 'pull' is to
# set 'pull.rebase = true', another way is to set 'branch.autoSetupRebase
# = always', but neither of those seems to work quite right for me.
# In any case, however you do it, if you try a 'pr' and it has conflicts
# you need to manually resolve, then do 'rebase --continue' afterwards
# to finish it up.
# <http://randyfay.com/content/simpler-rebasing-avoiding-unintentional-merge-commits>
# <http://randyfay.com/content/rebase-workflow-git>


# TODO: cf., <http://nuclearsquid.com/writings/git-tricks-tips-workflows/>


# For more alias ideas, see:
# <http://noamlewis.wordpress.com/2012/05/21/my-git-aliases/>
# <http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/>
# And try the versus & frb aliases from:
# <https://github.com/ddopson/dotfiles/blob/master/.gitconfig>
[alias]
    hw    = help --web
    # For more details on the files affected, try adding: --stat,
    # --numstat, --name-status, --name-only, --dirstat.
    # To only show N files, pass -N. Or consider: --since=2.weeks
    # Supposedly --graph defaults to --topo-order; but then why
    # does it not always look that way at work?
    # N.B., git-log picks up colors from color.diff. In particular,
    # the builtin --oneline will use color.diff.commit for the hash!
    lol   = log --color --graph --pretty=oneline --abbrev-commit --decorate
    lola  = log --color --graph --pretty=lola
    # Automatically filter to only show new things since parent.
    # (Alas, seems no way to get the whole tree rooted at the parent, a la rofl)
    ll    = "!git lol --first-parent $(git parent)^.."
    # This one also shows stashes and abandoned branches/heads.
    rofl  = "!git lol  $(git rev-list -g --all)"
    rofla = "!git lola $(git rev-list -g --all)"
    # Show more details of the most recent patch:
    # (To show the diff, use `-p`, `git show`, or `git diff --cached HEAD^`)
    top   = log --stat -1
    # List the files modified by a given commit (defaults to HEAD)
    # TODO: use perl/sed/awk to translate repo-absolute paths to relative paths.
    show-files = show --name-only --format=''
    unpushed = log @{u}..
    # Show all untracked files.
    untracked = ls-files --others --exclude-standard
    # Most of the time we already know about untracked files, and don't care.
    st    = status --branch --untracked-files=no
    # What we really want most of the time.
    ci    = commit --patch
    # For when we're lazy or singleminded.
    ca    = commit --all
    # N.B., we do *not* pass the --all flag here! Instead we use --patch
    # to selectively choose changes.
    # TODO: do we want to add the --no-edit flag?
    amend = commit --amend --patch
    # We use "oo" rather than the standard "co" to avoid typo issues vs "ci".
    oo    = checkout
    pr    = pull --rebase
    ra    = rebase --abort
    rc    = rebase --continue
    # For getting rebases to work when they cherry picked you, or similar.
    rs    = rebase --skip
    # A paltry attempt to commute a child's patches over new patches in
    # the parent.
    #
    # Supposedly this should look at "branch.<name>.remote" and
    # "branch.<name>.merge" (just like the no-argument `git pull` does),
    # select all the commits between then (exclusive) and the most recent
    # one (inclusive), commute them to occur after the parent branch,
    # and set the current branch to point to that new end-of-commits. I
    # say "supposedly" because frequently it just drops all those commits
    # on the floor and sets the current branch to point directly to the
    # parent. I've no idea why that happens; but when it does, just using
    # a vanilla `git rebase` seems to work (because it uses the parent
    # as the <exclude-from> point, rather than trying to determine it from
    # "branch.<name>.{remote,merge}").
    #
    # BUG: Write a heavy-duty script to do the right thing already!
    # TODO: until we do the script, adding --no-ff seems to help...
    # TODO: perhaps it'd help to use:
    #   --keep-base instead of --onto?
    #   --reapply-cherry-picks (in lieu of default --no-reapply-cherry-picks)?
    #       *** This seems like it might be the problem, since the
    #       default causes to preemptively drop things.
    #   --empty=ask (in lieu of the default --empty=drop)?
    #   --no-fork-point together with an explicit upstream (e.g.,
    #       using `git merge-base` without the --fork-point flag)?
    #       (In case we don't trust `reflog` to actually help picking
    #       the best common ancestor; e.g., because git-gc cleared reflog out)
    # TODO: according to <https://git-scm.com/docs/gitcli> it's
    #   preferred to use the "--foo=bar" form rather than the "--foo bar"
    #   form. The manpage doesn't show it as an option, but if --onto
    #   supports that sytax, then we should use it here.
    rop   = "!git rebase --onto $(git-parent)"
    # BUG: this won't tab-complete the branch name, unlike `oo` itself
    oorop = "!f(){ git oo $1 && git rop ; }; f"
    wdiff = diff --color-words
    # This will undo the most recent commit action, leaving the changes
    # from that commit in place. <http://stackoverflow.com/q/927358/358069>
    unrecord = reset --soft 'HEAD^'
    # Undo a `git reset`. N.B., '{1}' may not always be the one you
    # want! cf., `git reflog` <http://stackoverflow.com/a/2531803/358069>
    unreset = reset 'HEAD@{1}'
    # Undo staging the changes to some given file/path.
    # TODO: maybe add some stuff to make this alias require an argument?
    # TODO: add an alias for unstaging only some chunks, via `git reset -p --`
    unadd = reset --
    # Unstage all changes in or below the current directory.
    unadd-all = reset -- .
    # TODO: do we prefer these names for the aliases?
    unstage = reset --
    unstage-all = reset -- .
    # Revert (i.e., discard) all *unstaged* changes.
    # * To remove untracked files, use `git clean -df` (with -x
    #   will also remove things that are otherwise .gitignore)
    # * To revert only some chunks, use `git checkout -p`
    # In all cases, you can give a specific file name instead of '.'
    # <http://stackoverflow.com/q/52704/358069>
    revert-all = checkout -- .
    # BUG: the second argument to `checkout -b` should be the
    # *remote* branch it tracks... I think. In any case, just passing
    # the second argument isn't enough to cause the new local-branch
    # to track the old local-branch (as we want for Chromium stuff).
    # Whence the additional call to `branch -u`.
    # For more info, cf:
    # <https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch>
    # <https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches>
    # TODO: actually, the brokenness here may have something to do with
    # Chromium defining their own git_new_branch.py command.
    #new-branch = "!f(){ \
    #    old=\"`git rev-parse --abbrev-ref HEAD`\"; \
    #    git checkout -b \"$1\" \"$old\" ; \
    #    git branch --set-upstream-to=\"$old\"; \
    #    }; f"
    # TODO: according to <https://git-scm.com/docs/gitcli> it's preferred to use the "--foo=bar" form rather than the "--foo bar" form. The manpage doesn't show it as an option, but if --set-upstream supports that sytax, then we should use it here.
    push-new-branch = push --set-upstream origin
    # BUG: this should also update children to see this branch's upstream
    # as their new upstream, rather than orphaning the children as this
    # version does.
    # N.B., can use -D as a shorthand for -d --force
    del-branch = branch -d
    push-del-branch = push origin --delete
    # List branches in order last modified:
    # (N.B., for-each-ref doesn't support --color nor %cr)
    # What fields are supported: <http://stackoverflow.com/a/21868228>
    # HT: <https://gist.github.com/mwhite/6887990>
    # TODO: is there a way to combine this info with the "bb" info?
    # TODO: is there any way to color this like we do for the others?
    lm = "for-each-ref \
        --sort='-authordate' \
        --format='%(authordate:short)%09%(objectname:short)%09%(refname:short)' \
        refs/heads"
    # Show the most recent tag
    lt = describe --tags --abbrev=0
    # Show all tags, along with the objecttype of their referent.
    # (Annotated-tags have objecttype=tag; whereas unannotated-tags
    # have objecttype=commit.  It is also possible for "tag" references
    # to point to other objecttypes like tree or blob; but that
    # facility doesn't seem to be used anywhere yet.)
    # HT: <https://stackoverflow.com/a/21032332>
    # TODO: do prettier formatting of annotated-tags, and/or break
    # out into a separate script to allow more programmatic things
    # like filtering out the annotated-tags vs unannotated-tags.
    # TODO: See also <https://stackoverflow.com/q/6900328> <https://stackoverflow.com/a/6270112>
    tags = for-each-ref --format='%(refname:short) %(objecttype)' refs/tags/
    # List the modification date of files in the current directory (in order of file name).
    # BUG: there's some kind of typo here re the quoting. What's wrong?
    #lslm = "!git ls-tree -z --name-only HEAD | xargs -0 -n1 -I{} -- git log -1 --format='%aI {}' {} | sed -re 's/^([^T]+)T\S+(.*)/\1\2/'"
    # HT: <https://gist.github.com/pksunkara/988716>
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>%n\" --author=\"$1\"' -"
    # HT: <https://gist.github.com/mwhite/6887990>
    # See also: <https://github.com/MarkLodato/scripts/blob/master/git-alias>
    aliases = "!git config -l | grep alias | cut -c 7-"
    # Get rid of dangling patches in the repo.
    gc-for-reals = "!git reflog expire --expire=now --all && git gc --prune=now"
    # HT: <http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/>
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
    assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
    # Chromium depot-tools stuff.
    # TODO: how to guard these so they don't break on my other systems?
    # TODO: will this work with Google/Perforce, or need we re-write our own version?
    # N.B., `git map` is also from depot-tools, though it doesn't need an alias.
    ru = rebase-update


# Trying to solve this problem
# <http://stackoverflow.com/q/11403407>
# <http://stackoverflow.com/a/6565661>
# <http://stackoverflow.com/a/5343146>
#[credential "https://github.iu.edu/"]
#    username = wrengr

# TODO: is there a way to set this http info differently for various
# hosts, while using the same file (so I don't need to postprocess
# the stuff in my dotfiles repo)?
#[http]
#    cookiefile = /usr/local/google/home/wrengr/.gitcookies

# Speed up pulling from repos by pulling from the read-only version
# (so you don't need to authenticate) but can still push to the
# real one.
# TODO: do we actually want/need to do this?
# <http://billiob.net/blog/20110410_git_pushinsteadof.html>
# <https://www.kernel.org/pub/software/scm/git/docs/git-config.html>
#[url "git@github.com:"]
#    pushInsteadOf = https://github.com/
#    pushInsteadOf = git://github.com/

# For git-on-borg at google. The way the config looks is confusing; what
# this means is whenever we type "gob:" that'll get rewritten to the url.
#[url "sso://user/wrengr/"]
#    insteadOf = gob:
