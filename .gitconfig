# N.B., the [user] values are overridden by the GIT_*_{NAME,EMAIL}
# variables. Thus, even though we set them here, we can still change
# them on each individual machine in our ~/.bash_profile.
[user]
    name = wren romano
    email = wren@community.haskell.org
    # TODO: set up GPG stuff. Not that any project I work on uses
    # it... Once this is enabled here, always pass -S or -s to
    # commit and -s to tag.
    # Cf., <https://mikegerwitz.com/papers/git-horror-story>
    #signingkey = 00000000
[github]
    user = wrengr
[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = true
[core]
    # Just to be sure.
    editor = vim
    # Chromium style demands we disable autocrlf.
    # TODO: do we want this everywhere else? Can we guard it to be
    # Chromium-only?
    autocrlf = false
    filemode = false
    whitespace = trailing-space,space-before-tab
    # TODO: we want something like this, but we don't want to use
    # ~/.gitignore per se, since that's likely to be the one in my
    # dotfiles repo, which ignores a bunch of homedir-specific stuff
    # we may not want to ignore elsewhere. So we should add some file
    # like ~/.gitconfig.ignore to the dotfiles repo, and then use that
    # one here:
    #excludesfile = '~/.gitignore'
[advice]
    # Disable `git status`'s "how to stage/unstage/add" hints
    statusHints = false
    # Disable `git push`'s hints about non-fastforward-able patches
    #pushNonFastForward = false


[push]
    default = simple
[merge]
    ff = only
[branch]
    # Have newly-created branches starting from a branch, set their
    # start point as upstream (as oppose to the default 'true' setting
    # where this only happens when the start point is a remote-tracking
    # branch). <http://grimoire.ca/git/config>
    autoSetupMerge = always


# There are ways of making 'pull --rebase' the default, but it seems
# to take a non-trivial amount of work; so I'm just using an alias
# 'pr' for now. One way to try to make 'pr' the default 'pull' is to
# set 'pull.rebase = true', another way is to set 'branch.autoSetupRebase
# = always', but neither of those seems to work quite right for me.
# In any case, however you do it, if you try a 'pr' and it has conflicts
# you need to manually resolve, then do 'rebase --continue' afterwards
# to finish it up.
# <http://randyfay.com/content/simpler-rebasing-avoiding-unintentional-merge-commits>
# <http://randyfay.com/content/rebase-workflow-git>


# TODO: cf., <http://nuclearsquid.com/writings/git-tricks-tips-workflows/>


# For more alias ideas, see:
# <http://noamlewis.wordpress.com/2012/05/21/my-git-aliases/>
# <http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/>
[alias]
    hw    = help --web
    # For more details on the files affected, try adding --name-status,
    # --stat, or --numstat. To only show N files, pass -N.
    lol   = log --graph --decorate --pretty=oneline --abbrev-commit
    # N.B., the %C(auto) color was introduced in git 1.8.3 (24 May 2013)
    lola  = log --color --graph --pretty=format:'%C(yellow)%h%Creset %Cgreen(%cr)%Creset %C(blue)<%an>%Creset%C(auto)%d%Creset %s'
    # This one also shows stashes and abandoned branches/heads
    rofl  = "!git log --graph --decorate --oneline $(git rev-list -g --all)"
    # Show more details of the most recent patch:
    # (To show the diff, use `git show` or try `git diff --cached HEAD^`)
    top   = log --stat -1
    unpushed = log @{u}..
    st    = status --branch
    # What we really want most of the time.
    ci    = commit --patch
    # For when we're lazy or singleminded.
    ca    = commit --all
    # N.B., we do *not* pass the --all flag here! Instead we use --patch
    # to selectively choose changes.
    amend = commit --amend --patch
    # We use "oo" rather than the standard "co" to avoid typo issues vs "ci".
    oo    = checkout
    pr    = pull --rebase
    ra    = rebase --abort
    rc    = rebase --continue
    # AKA: commute the diff goddamnit!
    ro    = rebase --onto
    # For getting rebases to work when they cherry picked you, or similar.
    rs    = rebase --skip
    # This will unrecord the most recent commit. N.B., you can also
    # use "~1" instead of "^" at the end; or "~N" to revert the
    # N most-recent commits. <http://stackoverflow.com/q/927358/358069>
    unrecord = reset --soft 'HEAD^'
    # Undo a `git reset`. N.B., '{1}' may not always be the one you
    # want; cf `git reflog` <http://stackoverflow.com/a/2531803/358069>
    unreset = reset 'HEAD@{1}'
    # Unstage some files. (Takes one or more files/paths)
    # * To unstage only some chunks, use `git reset -p --`
    unadd = reset --
    unadd-all = reset -- .
    # Revert (i.e., discard) all *unstaged* changes.
    # * To remove untracked files, use `git clean -df`
    # * To revert only some chunks, use `git checkout -p`
    # In all cases, you can give a specific file name instead of '.'
    # <http://stackoverflow.com/q/52704/358069>
    revert-all = checkout -- .
    # BUG: the second argument to `checkout -b` should be the
    # *remote* branch it tracks... I think. In any case, just passing
    # the second argument isn't enough to cause the new local-branch
    # to track the old local-branch (as we want for Chromium stuff).
    # Whence the additional call to `branch -u`.
    # For more info, cf:
    # <https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch>
    # <https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches>
    # TODO: actually, the brokenness here may have something to do with
    # Chromium defining their own git_new_branch.py command.
    new-branch = "!f(){ \
        old=\"`git rev-parse --abbrev-ref HEAD)\"; \
        git checkout -b \"$1\" \"$old\" ; \
        git branch --set-upstream-to=\"$old\"; \
        }; f"
    push-new-branch = push --set-upstream origin
    # TODO: a version of del-branch that automatically switches to
    # the upstream branch if we're on the branch to be
    # deleted. (Rather than just erroring out, as `branch -d` does.)
    # N.B., can use -D as a shorthand for -d --force
    del-branch = branch -d
    push-del-branch = push origin --delete
    # List branches in order last modified:
    # (N.B., for-each-ref doesn't support --color nor %cr)
    # What fields are supported: <http://stackoverflow.com/a/21868228>
    # HT: <https://gist.github.com/mwhite/6887990>
    # TODO: is there a way to combine this info with the "mb" and "bv" info?
    lm = "!git for-each-ref \
        --sort='-authordate' \
        --format='%(authordate:short)%09%(objectname:short)%09%(refname)' \
        refs/heads | sed -e 's@refs/heads/@@'"
    bv = branch -vv
    # HT: <https://gist.github.com/pksunkara/988716>
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>%n\" --author=\"$1\"' -"
    # HT: <https://gist.github.com/mwhite/6887990>
    aliases = "!git config -l | grep alias | cut -c 7-"
    # Get rid of dangling patches in the repo.
    gc-for-reals = "!git reflog expire --expire=now --all && git gc --prune=now"
    # Chromium/Google-only things.
    # TODO: how to guard these so they don't break on my other systems?
    # N.B., `git map` comes from the same place as `git map-branches`
    # (I think), so it's also Chromium-specific.
    mb = map-branches
    ru = rebase-update


# Trying to solve this problem
# <http://stackoverflow.com/q/11403407>
# <http://stackoverflow.com/a/6565661>
# <http://stackoverflow.com/a/5343146>
#[credential "https://github.iu.edu/"]
#    username = wrengr

# TODO: is there a way to set this http info differently for various
# hosts, while using the same file (so I don't need to postprocess
# the stuff in my dotfiles repo)?
#[http]
#    cookiefile = /usr/local/google/home/wrengr/.gitcookies

# Speed up pulling from repos by pulling from the read-only version
# (so you don't need to authenticate) but can still push to the
# real one.
# TODO: do we actually want/need to do this?
# <http://billiob.net/blog/20110410_git_pushinsteadof.html>
# <https://www.kernel.org/pub/software/scm/git/docs/git-config.html>
#[url "git@github.com:"]
#    pushInsteadOf = https://github.com/
#    pushInsteadOf = git://github.com/

# For git-on-borg at google. The way the config looks is confusing; what
# this means is whenever we type "gob:" that'll get rewritten to the url.
[url "sso://user/wrengr/"]
    insteadOf = gob:
