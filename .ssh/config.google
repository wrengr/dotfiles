# wren gayle romano's Google corp ~/.ssh/config     ~ 2021.08.02
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Adding compression to help speed up remote Vim.
# <https://stackoverflow.com/a/34206244/358069>
Compression yes
CompressionLevel 9


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ `corp-ssh-helper` needed for corporate login: <go/corp-ssh-helper>
#
# N.B., The ProxyCommand bit must be "Match host". It cannot be
# "Match canonical" because we need to set ProxyCommand before
# canonicalization whenever Corp DNS is unavailable.  And it cannot
# be "Host", because that does not take earlier "Hostname" into account.
#
# HACK: This should already be set in the global /etc/ssh_config
# (and there they cite <b/62672741>).  Not sure why that isn't
# being picked up.
#
# WARNING: apparently this will break in the future, because google
# hates stability in how things work:
# <https://g3doc.corp.google.com/corp/access/ssh/helper/g3doc/index.md?cl=head#openssh>
Match host *.corp.google.com
    ProxyCommand /usr/local/bin/corp-ssh-helper %h %p

# This modified ProxyCommand taken from:
# $Id: //depot/google3/googledata/corp/puppet/gmac/common/modules/ssh/templates/ssh_config.erb#28 $
# Not entirely sure what it does (or of it's truly necessary), but...
# BUGFIX: They errantly use "Host" instead of "Match host", so I'm fixing that.
# Hopefully this may fix the errors where I have to rerun /usr/local/sbin/gmac-updater after gcert every friggin day just to get it to log in.
# BUG: nope, doesn't get rid of that problem. Now sometimes even gives it after having run gmac-updater and gcert for the day...
Match host *.c.googlers.com
  ProxyCommand /usr/local/bin/corp-ssh-helper -relay=sup-ssh-relay.corp.google.com -proxy-mode=grue %h %p

# TODO: consider using something like the following (also from <go/corp-ssh-helper>) to disable the above ProxyCommand whenever already on the corp network.  They make some mention of removing the above setting of ProxyCommand, but I'm not entirely sure how to fit them both together like I want/mean...
#Match host *.corp.google.com !exec "/usr/local/bin/corp-ssh-helper -check"
#   ProxyCommand none
#
# TODO: an alternative `exec` from <https://g3doc.corp.google.com/company/teams/android/wfh/ssh/native-ssh.md?cl=head#configure-ssh-for-performance> is: 
#Match host *.corp.google.com exec "curl -sI https://uberproxy-debug.corp.google.com/oncorp | grep -iq '^Location: .*/no'"
# Though they use that to enable ProxyCommand rather than to disable it...


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Multiplex gnubby taps across all connections: <go/macroadwarrior2>
# They used "Host" alone, but I', guessing "Match host" should be fine too.
Match host *.corp.google.com,*c.googlers.com
    ForwardAgent yes
    ControlMaster auto
    ControlPath ~/.ssh/sockets/master-%r@%h:%p
    ControlPersist 15h


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Automate using scrn: <https://unix.stackexchange.com/a/445062>
# N.B., beware of the downsides of doing this for every connection:
# <https://serverfault.com/q/14389>
#
# TODO: Find some way to make this stanza opt-in, so that we can
# appropriately choose whether to use it or not.  The goal was just
# to automate this process for my usual use case, especially since
# doing it on the commandline (or as a shellscript wrapper) wasn't
# working for some unknown reason.
Match host *.corp.google.com,*c.googlers.com
    # This is like the `-t` flag to ssh.
    RequestTTY force
    # Run scrn instead of the usual login shell, so I don't forget to:
    # (a) always work in a scrn, and (b) use `scrn` in lieu of `screen`
    # <go/sk-screen-tmux>
    #
    # -h $NUMBER    Set scrn's scrollback buffer length.
    #                 N.B., I actually already have this in ~/.screenrc
    #                 N.B., also, apparently adding this flag below
    #                 is to debug a problem with the `scrn` wrapper
    #                 around screen; otherwise the -UDRRAS would get ignored.
    # -U            Run scrn in UTF-8 mode.
    # -D            PowerDetatch any elsewhere-running sessions.
    # -RR           Reattatch session, creating a new one if
    #                 necessary, and using the first one if more
    #                 than one is available.
    # -A            Resize the session to the size of my terminal window.
    # -S $STRING    Give the session a name.
    #
    # NOTE: This works fine when put in the config file here; however, when we try to do the same thing directly on the commandline we get some weird errors, due to corp-ssh-helper and scrn fighting.  What's going on there seems related to this email <https://groups.google.com/a/google.com/g/corp-ssh-relay-team/c/qIzffEYIFTI/m/RnPTXRQgAwAJ>
    RemoteCommand /usr/bin/scrn -h 99999 -UDRRAS viassh



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Fix OSX issues about breaking pipes when sleep-mode kicks in.
# <https://coderwall.com/p/8ag5aq/ssh-broken-pipe-fix-mac-os-x>
# <https://askubuntu.com/q/127369>, <https://apple.stackexchange.com/q/36690>
#
# Cf., <go/juanalonso-ssh> who instead suggests using {ServerAliveInterval 30;
# ServerAliveCountMax 60} for a total of 1800sec == 30min.  Whereas
# the below only lasts 600sec == 10min.  Not sure I want to be quite
# so aggressive as Juan, but worth noting anyways.  Juan also says
# to update /etc/ssh/sshd_config to have matching ClientAliveInterval
# and ClientAliveCountMax; of course that'll get reset every few
# days via puppet...
Host *
    # Ping the server if no messages received after this many seconds.
    # (Default: 0 = disable the feature, never ping)
    ServerAliveInterval 120
    # How many times to do ServerAliveInterval before giving up. (Default: 3)
    ServerAliveCountMax 5
    # Should we send keep-alive signals? If we do but we don't get
    # responses back then it will kill the session. (Default: yes)
    TCPKeepAlive no


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# TODO: do we actually want to do this?
# <https://apple.stackexchange.com/a/250572/117308>
#Host *
#    UseKeychain yes
#    AddKeysToAgent yes
#    IdentityFile ~/.ssh/id_rsa


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Short names for common ssh targets
Host ciruela
    HostName ciruela.c.googlers.com
    User wrengr

Host maracuya
    HostName maracuya.mtv.corp.google.com
    User wrengr
