# wren gayle romano's Google corp ~/.ssh/config     ~ 2024-01-30
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# N.B., despite being a config file for working in the seekrit
# confines of Google Corp, nothing in this file should actually be
# sensitive.  It is visible in <https://github.com/wrengr/dotfiles>
# for the express purpose of helping folks see examples of how to set
# up their own ~/.ssh/config
#
#
# ~~~~~ Important Notes
# The way ssh_config files work is complex and often unintuitive;
# therefore bear the following in mind:
# (And if still unsure, pass `-vvv` to ssh to see all the logic happen.)
#
#   == Parameters ==
#       Only the *first* value for a given parameter will be used!
#       Therefore, place more-specific rules before more-general
#       ones.  Wildcard patterns should be thought of as "fallbacks"
#       rather than as "defaults".
#   "HostName {foo}"
#       Specifies the actual hostname to use (despite whatever is
#       typed on the commandline).
#       For OpenSSH >=5.6 <http://www.openssh.com/txt/release-5.6>:
#       you can use "%h" which expands to whatever was typed on the
#       commandline.
#
#   == Rules ==
#   "Host {foo}"
#       Pattern matches against exactly what is typed on the
#       commandline; it does not match the "HostName" provided by
#       other rules.  To provide multiple patterns, they should be
#       separated by spaces (not commas).
#       Moreover, there can be only one "Host *" (apparently).
#   "Match originalhost {foo}"
#       Same as "Host {foo}", but can be combined with other "Match"
#       conditions.  However, unlike "Host", must use commas for
#       multiple patterns (not spaces).
#   "Match host {foo}"
#       Matches against the "HostName" rather than the commandline.
#       This is resolved before canonicalization, and therefore is
#       good for VPN situations where you need to set "ProxyCommand"
#       before canonicalization / DNS lookup.  To provide multiple
#       hostname patterns, they should be separated by commas (not
#       spaces).
#       FIXME: the manpage says this also matches against the result
#       of "CanonicalizeHostname", but that contradicts what the
#       google bug-report discussion says...
#   "Match canonical"
#       Only match/try this rule when reparsing this config after
#       performing canonicalization (and hence DNS lookup).  See
#       the "CanonicalizeHostname" parameter for more info.


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Commandline aliases for common ssh targets.
Host ciruela
    HostName SEEKRIT
    User SEEKRIT

Host maracuya
    HostName SEEKRIT
    User SEEKRIT


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Adding compression to help speed up remote Vim.
# <https://stackoverflow.com/a/34206244/358069>
Compression yes
# N.B., "CompressionLevel" is only allowed for protocol-1, not
# protocol-2: <https://serverfault.com/a/834880>.  Moreover, newer
# versions of OpenSSH no longer support protocol-1; e.g.,
#   OpenSSH_7.6p1, LibreSSL 2.6.2 (OSX 10.13.4)
#   OpenSSH_8.1p1, LibreSSL 2.7.3 (OSX 11.5.1)
# If you really really need to use a non-default compression level,
# you may consider the hack at: <https://serverfault.com/a/586739>


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ `corp-ssh-helper` needed for corporate login
#
# BUG: This should already be set in the global /etc/ssh_config.
# Not sure why that isn't being picked up...
#
# WARNING: apparently this will break in the future?
Match host *.corp.google.com
    ProxyCommand SEEKRIT


# This domain needs some extra flags for the helper (per /etc/ssh_config).
#
# N.B., before reorganizing this file (as per the "Important notes"
# section at the top), I was constantly getting issues about "nodename
# nor servname provided, or not known" at strangely unexpected times
# (i.e., when I am in fact on the VPN).  Reorganizing this file seems
# to have fixed that :)
#
# This is an apparently common issue, and yet googling can't find
# a reliable solution to it.  So for future reference, when you get
# that problem you can:
# (a) use `nslookup $HOSTNAME` to verify that is DNS failing.
#   However, do note that this is just the superficial cause not
#   the root cause.
# (b) for OSX: If you've recently changed your network settings to
#   use a different DNS server, then you need to:
#       $> sudo dscacheutil -flushcache
#   N.B., you should first close all programs that might be holding
#   onto the old cache.
# (c) for OSX: after logging into the VPN:
#       $> sudo killall -HUP mDNSResponder
#       $> sudo killall mDNSResponderHelper
#       # cf., <https://stackoverflow.com/a/40754476>
#   IME this will reliably fix the problem, with a few caveats:
#   (1) This is only a temporary fix and you'll have to redo it
#       after each reboot / VPN login.
#   (2) For some strange reason this doesn't work when called from
#       a script, it only works when entered directly on the commandline.
#   (3) For some strange reason when run in the same shell/terminal
#       session as the VPN login, sometimes it won't work.  This can
#       be fixed by opening a new terminal session and killing
#       mDNSResponder there.
#   Some additional comments:
#   (4) IME killing mDNSResponderHelper isn't necessary (though it
#       can't hurt).
#   (5) You can also send mDNSResponder the signal -STOP to merely
#       suspend it, and then -CONT to start it up again.
#
Match host *.c.googlers.com
  ProxyCommand SEEKRIT


# TODO: consider using an additional "exec" clause to disable
# ProxyCommand whenever already on the corp network.


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Multiplex gnubby taps across all connections
#
# BUG: On OSX we'll occasionally get "mux_client_request_session:
# read from master failed" warnings due to this multiplexing.
# According to <https://superuser.com/a/709143> this is a problem
# with ControlPersist under certain circumstances; and the only way
# to avoid it really is to simply not use ControlPersist (unless we
# want to write some script to try detecting these errors and removing
# the socket as needed, which sounds like a nightmare).
# Alternatively, there's a chance that setting IPQoS=throughput
# could help:
# <https://ny55.blogspot.com/2020/05/fix-broken-pipe-error-on-ssh-connection.html?m=0>
#
# FIXME(2021.08.10): Afaict this is causing all sorts of issues
# with the gnubby not working right; so disabling it for now.
#Match host *.corp.google.com,*c.googlers.com
#    # N.B., only ever use ForwardAgent for hosts you trust; cf.,
#    # the warning at: <https://docs.github.com/en/developers/overview/using-ssh-agent-forwarding>
#    ForwardAgent yes
#    ControlMaster auto
#    ControlPath ~/.ssh/sockets/ssh_mux-%r@%h:%p
#    ControlPersist 15h


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Automate using scrn: <https://unix.stackexchange.com/a/445062>
# N.B., beware of the downsides of doing this for every connection:
# <https://serverfault.com/q/14389>
#
# TODO: Find some way to make this stanza opt-in, so that we can
# appropriately choose whether to use it or not.  The goal was just
# to automate this process for my usual use case, especially since
# doing it on the commandline (or as a shellscript wrapper) wasn't
# working for some unknown reason.
#
# FIXME(2021.08.10): This is simply causing way too many issues to
# be used.  Until we can devote adequate time to figuring out what
# the heck is actually wrong with everything this interacts with, I'm
# disabling it.
# Match host *.corp.google.com,*c.googlers.com
#     # This is like the `-t` flag to ssh.
#     RequestTTY force
#     # Run scrn instead of the usual login shell, so I don't forget to:
#     # (a) always work in a scrn, and (b) use `scrn` in lieu of `screen`
#     #
#     # -h $NUMBER    Set screen's scrollback buffer length.
#     #                 N.B., I actually already have this in ~/.screenrc
#     #                 N.B., also, apparently adding this flag below
#     #                 is to debug a problem with the `scrn` wrapper,
#     #                 since otherwise the -UDRRAS would get ignored(?)
#     # -U            Run screen in UTF-8 mode.
#     # -D            PowerDetatch any elsewhere-running sessions.
#     # -RR           Reattatch session, creating a new one if
#     #                 necessary, and using the first one if more
#     #                 than one is available.
#     # -A            Resize the session to the size of my terminal window.
#     # -S $STRING    Give the session a name.
#     #
#     # HACK: This works fine when put in the config file here;
#     # however, when we try to do the same thing directly on the
#     # commandline we get some weird errors, due to corp-ssh-helper
#     # and and the scrn wrapper fighting.
#     #
#     RemoteCommand /usr/bin/scrn -h 99999 -UDRRAS viassh



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~ Universal fallbacks.
# TODO: figure out a robust exec pattern to restrict this rule to OSX only.
Host *
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Make sure to forward along information about our terminal.
    #
    # NOTE: Beware that if we enable ControlPersist, then ssh will
    # only send these variables along with the initial connection.
    SendEnv TERM COLORTERM COLORFGBG

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # ~~~~~ OSX: Avoid breaking pipes when sleep-mode kicks in.
    # <https://coderwall.com/p/8ag5aq/ssh-broken-pipe-fix-mac-os-x>
    # <https://askubuntu.com/q/127369>,
    # <https://apple.stackexchange.com/q/36690>
    #
    # Ping the server if no messages received after this many seconds.
    # (Default: 0 = disable the feature, never ping)
    ServerAliveInterval 120
    # How many times to do ServerAliveInterval before giving up. (Default: 3)
    ServerAliveCountMax 5
    # Should we send keep-alive signals? If we do but we don't get
    # responses back then it will kill the session. (Default: yes)
    TCPKeepAlive no

    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # ~~~~~ OSX: Use keychain to get passphrases for private keys.
    # To save passphrases to the keychain, use `ssh-add -K`.
    # Whereas this config tells ssh to try looking things up there.
    # <https://apple.stackexchange.com/a/250572/117308>
    # (Personally, I've never wanted/missed this functionality; but
    # I leave it here for future reference.)
    #UseKeychain yes
    #AddKeysToAgent yes
    #IdentityFile ~/.ssh/id_rsa
    # TODO: even if we don't do the UseKeychain, it may still be
    #   nice to do the AddKeysToAgent.  (N.B., AddKeysToAgent can
    #   also be set to "ask" or "confirm"; not just "yes" and "no".)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ fin.
