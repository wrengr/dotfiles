-- wren gayle romano's ghci login script            ~ 2021.11.13
--
-- N.B., this file doesn't understand block-comments (<= 9.2.1 at least)

-- For more inspiration, see:
-- <http://www.haskell.org/pipermail/haskell-cafe/2007-September/032260.html>
-- <http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/dot-squashed.ghci>
-- <http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/dot-squashed.ghci641>
-- <http://www.haskell.org/haskellwiki/Ghci>
-- <http://hackage.haskell.org/package/ghc-paths>
-- <http://hackage.haskell.org/package/goa>


----------------------------------------------------------------
-- * Tool integration and basic shell commands.

-- :. <file>             Source commands from <file>
:def . readFile

-- :pwd                  Print the working directory
:def pwd \_ -> return "System.Directory.getCurrentDirectory >>= putStrLn"

-- :ls [...]             Get a directory listing
:def ls \str -> return (":!ls " ++ str)

-- :stdout <var> <cmd>   Execute <cmd>, redirecting stdout to <var>
:{
:def stdout \varcmd ->
        case break Data.Char.isSpace varcmd of
        { (var, _:cmd) ->
            return $ unlines
                [ ":set -fno-print-bind-result"
                , "tmp   <- System.Directory.getTemporaryDirectory"
                , "(f,h) <- System.IO.openTempFile tmp \"ghci\""
                , "sto   <- GHC.Handle.hDuplicate System.IO.stdout"
                , "GHC.Handle.hDuplicateTo h System.IO.stdout"
                , "System.IO.hClose h"
                , cmd
                , "GHC.Handle.hDuplicateTo sto System.IO.stdout"
                , "let readFileNow f = readFile f >>= \\t -> "
                    ++ "Data.List.length t `seq` return t"
                , var ++ " <- readFileNow f"
                , "System.Directory.removeFile f"
                ]
        ; _ -> return "putStrLn \"usage: :stdout <var> <cmd>\""
        }
:}

-- * Integration with HLint.
:{
:def hlint \_ -> return $ unlines
        [ ":unset +t +s"
        , ":set -w"
        , ":stdout hlintvar1 :show modules"
        , ":cmd "
            ++ "( return"
            ++ ". unwords"
            ++ ". (:) \":!hlint\""
            ++ ". map"
            ++ "    ( takeWhile (/= ',')"
            ++ "    . Data.List.drop 2"
            ++ "    . dropWhile (/= '(')"
            ++ "    )"
            ++ ". lines"
            ++ "$ hlintvar1"
            ++ ")"
        , ":set +t +s -Wall"
        ]
:}

-- * Integration with Hoogle (etc).
-- (See also ghc-paths based solutions)
:def url        \str -> return $ ":!open -a /Applications/Safari.app " ++ str
:def hoogle     \str -> return $ ":!hoogle --count=15 \"" ++ str ++ "\""
-- :def hoogle_url \str -> return $ ":url http://haskell.org/hoogle/?hoogle=" ++ str
-- :def ??? ":!hoogle --info %"  -- TODO: what's a good name for that?
:def ghc_pkg    \str -> return $ ":!ghc-pkg " ++ str

-- * Run a Test.Framework test (HT: gnezdo)
:{
:def testc \t -> return $ "Test.Framework.defaultMain "
                        ++ "[testCase \"" ++ t ++ "\" " ++ t ++ "]"
:}
:{
:def testp \t -> return $ "Test.Framework.defaultMain "
                        ++ "[testProperty \"" ++ t ++ "\" " ++ t ++ "]"
:}

-- * With GOA (for reference, rather than actual use)
-- :m - Prelude
-- :m + GOA
-- setLambdabotHome "/Users/wren/.cabal/bin"
-- :def bs        lambdabot "botsnack"
-- :def pl        lambdabot "pl"
-- :def unpl      lambdabot "unpl"
-- :def redo      lambdabot "redo"
-- :def undo      lambdabot "undo"
-- :def index     lambdabot "index"
-- :def docs      lambdabot "docs"
-- :def instances lambdabot "instances"
-- :def hoogle    lambdabot "hoogle"
-- :def source    lambdabot "fptools"
-- :def where     lambdabot "where"
-- :def version   lambdabot "version"
-- :def src       lambdabot "src"


----------------------------------------------------------------
-- * Language extensions and type-checker plugins we always want enabled.
:set -XNoMonomorphismRestriction
:set -XBangPatterns
:set -XFlexibleContexts
:set -XTypeOperators


-- At work, these are required for running things with a local
-- installation of bare GHC, instead of jumping through hoops to
-- use Blaze. Of course, to support type-checker plugins, we need
-- a more recent version of GHC than the one that ships by default.
-- :set -fplugin=GHC.TypeLits.KnownNat.Solver
-- :set -fplugin=GHC.TypeLits.Extra.Solver
-- :set -fplugin=GHC.TypeLits.Normalise


----------------------------------------------------------------
-- * Colorful prompt
-- <http://blog.havenisms.com/colorizing-the-ghci-prompt>
-- BUG: this messes up GHCi's readline/editline stuff though.
-- I.e., where the cursor is on the page when linewraps happen,
-- etc. I last verified this bug as of GHC-7.6.3 (so there's always
-- a chance it may have been fixed since then.)
-- :set prompt "\O33[32;1m%s\O33[34;1m>\O33[0m "
--
-- Or, if you want the Haskell logo: set your terminal to use one
-- of the <https://github.com/ryanoasis/nerd-fonts> and use e61f
-- (larger) or e777 (smaller).
-- :set prompt "\ESC[94m\STXî˜Ÿ  \ESC[m\STX"


----------------------------------------------------------------
:set editor vim

-- * If in a Cabal directory, be sure to auto-include Cabal's CPP macros.
:!_ghci_include_cabal_macros

-- * Other helpful notes:
-- Use -fobject-code            to compile modules before loading.
-- Use -hide-package <pkg>      to do the obvious.
-- Use --extra-lib-dir=/usr/lib to resolve trouble with iconv linking in cabal.

-- * Debugger flags
-- <http://www.haskell.org/ghc/dist/current/docs/users_guide/ghci-debugger.html>
:set -fbreak-on-error
-- :set -fbreak-on-exception

-- * Give memory and timing info
-- (N.B., must be at the end of this file, else we'll get a whole
-- bunch of verbiage every time we start up.)
:set +s

----------------------------------------------------------------
----------------------------------------------------------- fin.
